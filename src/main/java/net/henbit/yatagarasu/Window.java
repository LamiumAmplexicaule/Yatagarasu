package net.henbit.yatagarasu;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.jnativehook.GlobalScreen;
import org.jnativehook.NativeHookException;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.InetSocketAddress;

public class Window extends JFrame
{

    private final GlobalKeyListener globalKeyListener;

    private JPanel jpanel;
    // IPアドレス入力欄
    private JTextField ipAddressTextField;
    // 送信モード
    private JButton senderButton;
    // 受信モード
    private JButton receiverButton;
    // IPアドレスラベル
    private JLabel ipAddressLabel;
    // モードラベル
    private JLabel modeLabel;
    // 有効か
    private JRadioButton enableRadioButton;

    public Window(final Main instance)
    {
        globalKeyListener = new GlobalKeyListener(instance);

        // タイトル
        setTitle("ヤタガラス");
        // リサイズをできないように
        setResizable(false);
        // パネルを設置
        setContentPane(jpanel);
        // 大きさ
        setSize(330, 120);
        // 閉じるボタンを押せば閉じるように
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        // 見えるように
        setVisible(true);

        // ボタンの切替
        senderButton.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mousePressed(MouseEvent e)
            {
                super.mouseClicked(e);
                if (!e.getComponent().isEnabled()) return;
                instance.setMode(Main.Mode.Sender);
                ipAddressTextField.setEnabled(false);
                senderButton.setEnabled(false);
                receiverButton.setEnabled(false);
                instance.addShutdownHook();
                registerGlobalHook();

                instance.setEnable();
                enableRadioButton.setSelected(true);

                instance.setInetSocketAddress(new InetSocketAddress(ipAddressTextField.getText(), Main.PORT));
            }
        });

        receiverButton.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mousePressed(MouseEvent e)
            {
                super.mouseClicked(e);
                if (!e.getComponent().isEnabled()) return;
                instance.setMode(Main.Mode.Receiver);
                ipAddressTextField.setEnabled(false);
                receiverButton.setEnabled(false);
                senderButton.setEnabled(false);
                instance.removeShutdownHook();
                unregisterGlobalHook();

                instance.setEnable();
                enableRadioButton.setSelected(true);

                instance.getReceiverThread().start();
            }
        });
        enableRadioButton.addActionListener(e ->
        {
            if (instance.isEnable())
            {
                enableRadioButton.setSelected(false);
                instance.setDisable();
            }
            else
            {
                enableRadioButton.setSelected(true);
                instance.setEnable();
            }
        });
    }

    private void unregisterGlobalHook()
    {
        if (GlobalScreen.isNativeHookRegistered())
        {
            try
            {
                GlobalScreen.unregisterNativeHook();
            }
            catch (NativeHookException ex)
            {
                System.err.println("There was a problem unregistering the native hook.");
                System.err.println(ex.getMessage());
                ex.printStackTrace();
                System.exit(1);
            }

            GlobalScreen.removeNativeKeyListener(globalKeyListener);
        }
    }

    private void registerGlobalHook()
    {
        if (!GlobalScreen.isNativeHookRegistered())
        {
            try
            {
                GlobalScreen.registerNativeHook();
            }
            catch (NativeHookException ex)
            {
                System.err.println("There was a problem registering the native hook.");
                System.err.println(ex.getMessage());
                ex.printStackTrace();
                System.exit(1);
            }

            GlobalScreen.addNativeKeyListener(globalKeyListener);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$()
    {
        jpanel = new JPanel();
        jpanel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        ipAddressLabel = new JLabel();
        ipAddressLabel.setText("IP Address");
        jpanel.add(ipAddressLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ipAddressTextField = new JTextField();
        ipAddressTextField.setText("192.168.0.0");
        jpanel.add(ipAddressTextField, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        senderButton = new JButton();
        senderButton.setText("Sender");
        jpanel.add(senderButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        receiverButton = new JButton();
        receiverButton.setText("Receiver");
        jpanel.add(receiverButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modeLabel = new JLabel();
        modeLabel.setText("Mode");
        jpanel.add(modeLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        enableRadioButton = new JRadioButton();
        enableRadioButton.setEnabled(true);
        enableRadioButton.setSelected(false);
        enableRadioButton.setText("Enable");
        jpanel.add(enableRadioButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$()
    {
        return jpanel;
    }

}
